// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Util.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Util.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - UtilRoot

@implementation UtilRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - UtilRoot_FileDescriptor

static GPBFileDescriptor *UtilRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.hr.message"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PBHttpState

GPBEnumDescriptor *PBHttpState_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "NullError\000Success\000Error\000RuntimeException"
        "\000ExistError\000VaildError\000";
    static const int32_t values[] = {
        PBHttpState_NullError,
        PBHttpState_Success,
        PBHttpState_Error,
        PBHttpState_RuntimeException,
        PBHttpState_ExistError,
        PBHttpState_VaildError,
    };
    static const char *extraTextFormatInfo = "\006\000\t\000\001\007\000\002\005\000\003\020\000\004\n\000\005\n\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBHttpState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBHttpState_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBHttpState_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBHttpState_NullError:
    case PBHttpState_Success:
    case PBHttpState_Error:
    case PBHttpState_RuntimeException:
    case PBHttpState_ExistError:
    case PBHttpState_VaildError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PBPosition

@implementation PBPosition

@dynamic x;
@dynamic y;

typedef struct PBPosition__storage_ {
  uint32_t _has_storage_[1];
  float x;
  float y;
} PBPosition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = PBPosition_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBPosition__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = PBPosition_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBPosition__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBPosition class]
                                     rootClass:[UtilRoot class]
                                          file:UtilRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBPosition__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Pageable

@implementation Pageable

@dynamic pageNumber;
@dynamic pageSize;
@dynamic pageCount;
@dynamic resultCount;

typedef struct Pageable__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageNumber;
  int32_t pageSize;
  int32_t pageCount;
  int32_t resultCount;
} Pageable__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pageNumber",
        .dataTypeSpecific.className = NULL,
        .number = Pageable_FieldNumber_PageNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Pageable__storage_, pageNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = Pageable_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Pageable__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageCount",
        .dataTypeSpecific.className = NULL,
        .number = Pageable_FieldNumber_PageCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Pageable__storage_, pageCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resultCount",
        .dataTypeSpecific.className = NULL,
        .number = Pageable_FieldNumber_ResultCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Pageable__storage_, resultCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Pageable class]
                                     rootClass:[UtilRoot class]
                                          file:UtilRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Pageable__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\n\000\002\010\000\003\t\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBNull

@implementation PBNull


typedef struct PBNull__storage_ {
  uint32_t _has_storage_[1];
} PBNull__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBNull class]
                                     rootClass:[UtilRoot class]
                                          file:UtilRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PBNull__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBReqRespMessage

@implementation PBReqRespMessage

@dynamic success;
@dynamic message;
@dynamic type;

typedef struct PBReqRespMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *message;
} PBReqRespMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = PBReqRespMessage_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = PBReqRespMessage_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBReqRespMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PBReqRespMessage_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBReqRespMessage__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBReqRespMessage class]
                                     rootClass:[UtilRoot class]
                                          file:UtilRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBReqRespMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBErrorMessage

@implementation PBErrorMessage

@dynamic value;

typedef struct PBErrorMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
} PBErrorMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PBErrorMessage_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBErrorMessage__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBErrorMessage class]
                                     rootClass:[UtilRoot class]
                                          file:UtilRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBErrorMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBMessage

@implementation PBMessage

@dynamic valueOneOfCase;
@dynamic stringValue;
@dynamic intValue;
@dynamic boolValue;

typedef struct PBMessage__storage_ {
  uint32_t _has_storage_[2];
  int32_t intValue;
  NSString *stringValue;
} PBMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stringValue",
        .dataTypeSpecific.className = NULL,
        .number = PBMessage_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PBMessage__storage_, stringValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intValue",
        .dataTypeSpecific.className = NULL,
        .number = PBMessage_FieldNumber_IntValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PBMessage__storage_, intValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boolValue",
        .dataTypeSpecific.className = NULL,
        .number = PBMessage_FieldNumber_BoolValue,
        .hasIndex = -1,
        .offset = 0,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBMessage class]
                                     rootClass:[UtilRoot class]
                                          file:UtilRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "value",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\010\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void PBMessage_ClearValueOneOfCase(PBMessage *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
