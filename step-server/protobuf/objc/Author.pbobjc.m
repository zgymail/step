// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Author.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Author.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AuthorRoot

@implementation AuthorRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AuthorRoot_FileDescriptor

static GPBFileDescriptor *AuthorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"message.ww"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PBUserRegisterType

GPBEnumDescriptor *PBUserRegisterType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Local\000Weixin\000Qq\000";
    static const int32_t values[] = {
        PBUserRegisterType_Local,
        PBUserRegisterType_Weixin,
        PBUserRegisterType_Qq,
    };
    static const char *extraTextFormatInfo = "\002\000\005\000\001\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBUserRegisterType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBUserRegisterType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBUserRegisterType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBUserRegisterType_Local:
    case PBUserRegisterType_Weixin:
    case PBUserRegisterType_Qq:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PBUser

@implementation PBUser

@dynamic id_p;
@dynamic type;
@dynamic identity;
@dynamic nickName;
@dynamic sex;
@dynamic headIcon;

typedef struct PBUser__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t type;
  int32_t sex;
  NSString *identity;
  NSString *nickName;
  NSString *headIcon;
} PBUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUser__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBUser__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "identity",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Identity,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBUser__storage_, identity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBUser__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBUser__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "headIcon",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_HeadIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBUser__storage_, headIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUser class]
                                     rootClass:[AuthorRoot class]
                                          file:AuthorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\010\000\007\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBUserAdd

@implementation PBUserAdd

@dynamic hasUser, user;
@dynamic md5Password;
@dynamic validCode;

typedef struct PBUserAdd__storage_ {
  uint32_t _has_storage_[1];
  PBUser *user;
  NSString *md5Password;
  NSString *validCode;
} PBUserAdd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(PBUser),
        .number = PBUserAdd_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUserAdd__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "md5Password",
        .dataTypeSpecific.className = NULL,
        .number = PBUserAdd_FieldNumber_Md5Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBUserAdd__storage_, md5Password),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validCode",
        .dataTypeSpecific.className = NULL,
        .number = PBUserAdd_FieldNumber_ValidCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBUserAdd__storage_, validCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUserAdd class]
                                     rootClass:[AuthorRoot class]
                                          file:AuthorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUserAdd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\013\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBUserThirdAdd

@implementation PBUserThirdAdd

@dynamic hasUser, user;
@dynamic accessToken;
@dynamic refreshToken;

typedef struct PBUserThirdAdd__storage_ {
  uint32_t _has_storage_[1];
  PBUser *user;
  NSString *accessToken;
  NSString *refreshToken;
} PBUserThirdAdd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(PBUser),
        .number = PBUserThirdAdd_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUserThirdAdd__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = PBUserThirdAdd_FieldNumber_AccessToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBUserThirdAdd__storage_, accessToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refreshToken",
        .dataTypeSpecific.className = NULL,
        .number = PBUserThirdAdd_FieldNumber_RefreshToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBUserThirdAdd__storage_, refreshToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUserThirdAdd class]
                                     rootClass:[AuthorRoot class]
                                          file:AuthorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUserThirdAdd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
